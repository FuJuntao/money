import { D as Dexie$1 } from './common/dexie-79123666.js';

/* SNOWPACK PROCESS POLYFILL (based on https://github.com/calvinmetcalf/node-process-es6) */
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
var globalContext;
if (typeof window !== 'undefined') {
    globalContext = window;
} else if (typeof self !== 'undefined') {
    globalContext = self;
} else {
    globalContext = {};
}
if (typeof globalContext.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
}
if (typeof globalContext.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
var title = 'browser';
var platform = 'browser';
var browser = true;
var argv = [];
var version = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};

function noop() {}

var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;

function binding(name) {
    throw new Error('process.binding is not supported');
}

function cwd () { return '/' }
function chdir (dir) {
    throw new Error('process.chdir is not supported');
}function umask() { return 0; }

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = globalContext.performance || {};
var performanceNow =
  performance.now        ||
  performance.mozNow     ||
  performance.msNow      ||
  performance.oNow       ||
  performance.webkitNow  ||
  function(){ return (new Date()).getTime() };

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp){
  var clocktime = performanceNow.call(performance)*1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor((clocktime%1)*1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds<0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds,nanoseconds]
}

var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}

var process = {
  nextTick: nextTick,
  title: title,
  browser: browser,
  env: {"NODE_ENV":"production"},
  argv: argv,
  version: version,
  versions: versions,
  on: on,
  addListener: addListener,
  once: once,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform,
  release: release,
  config: config,
  uptime: uptime
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function(resolve2) {
        resolve2(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: []}, f, y, t, g;
  return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {value: op[1], done: false};
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return {value: op[0] ? op[1] : void 0, done: true};
  }
}
function getSchemaString(table) {
  var primKeyAndIndexes = [table.schema.primKey].concat(table.schema.indexes);
  return primKeyAndIndexes.map(function(index) {
    return index.src;
  }).join(",");
}
function extractDbSchema(exportedDb) {
  var schema = {};
  for (var _i = 0, _a = exportedDb.tables; _i < _a.length; _i++) {
    var table = _a[_i];
    schema[table.name] = table.schema;
  }
  return schema;
}
function readBlobAsync(blob, type) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onabort = function(ev) {
      return reject(new Error("file read aborted"));
    };
    reader.onerror = function(ev) {
      return reject(ev.target.error);
    };
    reader.onload = function(ev) {
      return resolve(ev.target.result);
    };
    if (type === "binary")
      reader.readAsArrayBuffer(blob);
    else
      reader.readAsText(blob);
  });
}
function readBlobSync(blob, type) {
  if (typeof FileReaderSync === "undefined") {
    throw new Error("FileReaderSync missing. Reading blobs synchronously requires code to run from within a web worker. Use TSON.encapsulateAsync() to do it from the main thread.");
  }
  var reader = new FileReaderSync();
  var data = type === "binary" ? reader.readAsArrayBuffer(blob) : reader.readAsText(blob);
  return data;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule(fn, module) {
  return module = {exports: {}}, fn(module, module.exports), module.exports;
}
var typeson = createCommonjsModule(function(module, exports) {
  !function(e, n) {
    module.exports = n();
  }(commonjsGlobal, function() {
    var e = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e2) {
      return typeof e2;
    } : function(e2) {
      return e2 && typeof Symbol == "function" && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
    }, n = function() {
      return function(e2, n2) {
        if (Array.isArray(e2))
          return e2;
        if (Symbol.iterator in Object(e2))
          return function sliceIterator(e3, n3) {
            var t2 = [], r2 = true, i2 = false, o2 = void 0;
            try {
              for (var s2, c2 = e3[Symbol.iterator](); !(r2 = (s2 = c2.next()).done) && (t2.push(s2.value), !n3 || t2.length !== n3); r2 = true)
                ;
            } catch (e4) {
              i2 = true, o2 = e4;
            } finally {
              try {
                !r2 && c2.return && c2.return();
              } finally {
                if (i2)
                  throw o2;
              }
            }
            return t2;
          }(e2, n2);
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }(), t = function(e2) {
      if (Array.isArray(e2)) {
        for (var n2 = 0, t2 = Array(e2.length); n2 < e2.length; n2++)
          t2[n2] = e2[n2];
        return t2;
      }
      return Array.from(e2);
    }, r = Object.keys, i = Array.isArray, o = {}.toString, s = Object.getPrototypeOf, c = {}.hasOwnProperty, a = c.toString, u = ["type", "replaced", "iterateIn", "iterateUnsetNumeric"];
    function isThenable(e2, n2) {
      return Typeson.isObject(e2) && typeof e2.then == "function" && (!n2 || typeof e2.catch == "function");
    }
    function toStringTag(e2) {
      return o.call(e2).slice(8, -1);
    }
    function hasConstructorOf(n2, t2) {
      if (!n2 || (n2 === void 0 ? "undefined" : e(n2)) !== "object")
        return false;
      var r2 = s(n2);
      if (!r2)
        return false;
      var i2 = c.call(r2, "constructor") && r2.constructor;
      return typeof i2 != "function" ? t2 === null : typeof i2 == "function" && t2 !== null && a.call(i2) === a.call(t2);
    }
    function isPlainObject(e2) {
      return !(!e2 || toStringTag(e2) !== "Object") && (!s(e2) || hasConstructorOf(e2, Object));
    }
    function isObject(n2) {
      return n2 && (n2 === void 0 ? "undefined" : e(n2)) === "object";
    }
    function Typeson(o2) {
      var s2 = [], c2 = [], a2 = {}, y = this.types = {}, p = this.stringify = function(e2, n2, t2, r2) {
        r2 = Object.assign({}, o2, r2, {stringification: true});
        var s3 = l(e2, null, r2);
        return i(s3) ? JSON.stringify(s3[0], n2, t2) : s3.then(function(e3) {
          return JSON.stringify(e3, n2, t2);
        });
      };
      this.stringifySync = function(e2, n2, t2, r2) {
        return p(e2, n2, t2, Object.assign({}, {throwOnBadSyncType: true}, r2, {sync: true}));
      }, this.stringifyAsync = function(e2, n2, t2, r2) {
        return p(e2, n2, t2, Object.assign({}, {throwOnBadSyncType: true}, r2, {sync: false}));
      };
      var f = this.parse = function(e2, n2, t2) {
        return t2 = Object.assign({}, o2, t2, {parse: true}), h(JSON.parse(e2, n2), t2);
      };
      this.parseSync = function(e2, n2, t2) {
        return f(e2, n2, Object.assign({}, {throwOnBadSyncType: true}, t2, {sync: true}));
      }, this.parseAsync = function(e2, n2, t2) {
        return f(e2, n2, Object.assign({}, {throwOnBadSyncType: true}, t2, {sync: false}));
      }, this.specialTypeNames = function(e2, n2) {
        var t2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return t2.returnTypeNames = true, this.encapsulate(e2, n2, t2);
      }, this.rootTypeName = function(e2, n2) {
        var t2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return t2.iterateNone = true, this.encapsulate(e2, n2, t2);
      };
      var l = this.encapsulate = function(y2, p2, f2) {
        var l2 = (f2 = Object.assign({sync: true}, o2, f2)).sync, h2 = {}, v = [], d = [], b = [], O = !(f2 && "cyclic" in f2) || f2.cyclic, m = f2.encapsulateObserver, T = _encapsulate("", y2, O, p2 || {}, b);
        function finish(e2) {
          var n2 = Object.values(h2);
          if (f2.iterateNone)
            return n2.length ? n2[0] : Typeson.getJSONType(e2);
          if (n2.length) {
            if (f2.returnTypeNames)
              return [].concat(t(new Set(n2)));
            e2 && isPlainObject(e2) && !e2.hasOwnProperty("$types") ? e2.$types = h2 : e2 = {$: e2, $types: {$: h2}};
          } else
            isObject(e2) && e2.hasOwnProperty("$types") && (e2 = {$: e2, $types: true});
          return !f2.returnTypeNames && e2;
        }
        return b.length ? l2 && f2.throwOnBadSyncType ? function() {
          throw new TypeError("Sync method requested but async result obtained");
        }() : Promise.resolve(function checkPromises(e2, t2) {
          return Promise.all(t2.map(function(e3) {
            return e3[1].p;
          })).then(function(r2) {
            return Promise.all(r2.map(function(r3) {
              var i2 = [], o3 = t2.splice(0, 1)[0], s3 = n(o3, 7), c3 = s3[0], a3 = s3[2], u2 = s3[3], y3 = s3[4], p3 = s3[5], f3 = s3[6], l3 = _encapsulate(c3, r3, a3, u2, i2, true, f3), h3 = hasConstructorOf(l3, TypesonPromise);
              return c3 && h3 ? l3.p.then(function(n2) {
                return y3[p3] = n2, checkPromises(e2, i2);
              }) : (c3 ? y3[p3] = l3 : e2 = h3 ? l3.p : l3, checkPromises(e2, i2));
            }));
          }).then(function() {
            return e2;
          });
        }(T, b)).then(finish) : !l2 && f2.throwOnBadSyncType ? function() {
          throw new TypeError("Async method requested but sync result obtained");
        }() : f2.stringification && l2 ? [finish(T)] : l2 ? finish(T) : Promise.resolve(finish(T));
        function _adaptBuiltinStateObjectProperties(e2, n2, t2) {
          Object.assign(e2, n2);
          var r2 = u.map(function(n3) {
            var t3 = e2[n3];
            return delete e2[n3], t3;
          });
          t2(), u.forEach(function(n3, t3) {
            e2[n3] = r2[t3];
          });
        }
        function _encapsulate(n2, t2, o3, c3, a3, u2, y3) {
          var p3 = void 0, l3 = {}, b2 = t2 === void 0 ? "undefined" : e(t2), O2 = m ? function(e2) {
            var r2 = y3 || c3.type || Typeson.getJSONType(t2);
            m(Object.assign(e2 || l3, {keypath: n2, value: t2, cyclic: o3, stateObj: c3, promisesData: a3, resolvingTypesonPromise: u2, awaitingTypesonPromise: hasConstructorOf(t2, TypesonPromise)}, r2 !== void 0 ? {type: r2} : {}));
          } : null;
          if (b2 in {string: 1, boolean: 1, number: 1, undefined: 1})
            return t2 === void 0 || b2 === "number" && (isNaN(t2) || t2 === -1 / 0 || t2 === 1 / 0) ? (p3 = replace(n2, t2, c3, a3, false, u2, O2)) !== t2 && (l3 = {replaced: p3}) : p3 = t2, O2 && O2(), p3;
          if (t2 === null)
            return O2 && O2(), t2;
          if (o3 && !c3.iterateIn && !c3.iterateUnsetNumeric) {
            var T2 = v.indexOf(t2);
            if (!(T2 < 0))
              return h2[n2] = "#", O2 && O2({cyclicKeypath: d[T2]}), "#" + d[T2];
            o3 === true && (v.push(t2), d.push(n2));
          }
          var g = isPlainObject(t2), P = i(t2), j = (g || P) && (!s2.length || c3.replaced) || c3.iterateIn ? t2 : replace(n2, t2, c3, a3, g || P, null, O2), S = void 0;
          if (j !== t2 ? (p3 = j, l3 = {replaced: j}) : P || c3.iterateIn === "array" ? (S = new Array(t2.length), l3 = {clone: S}) : g || c3.iterateIn === "object" ? l3 = {clone: S = {}} : n2 === "" && hasConstructorOf(t2, TypesonPromise) ? (a3.push([n2, t2, o3, c3, void 0, void 0, c3.type]), p3 = t2) : p3 = t2, O2 && O2(), f2.iterateNone)
            return S || p3;
          if (!S)
            return p3;
          if (c3.iterateIn) {
            var w = function _loop(e2) {
              var r2 = {ownKeys: t2.hasOwnProperty(e2)};
              _adaptBuiltinStateObjectProperties(c3, r2, function() {
                var r3 = n2 + (n2 ? "." : "") + escapeKeyPathComponent(e2), i2 = _encapsulate(r3, t2[e2], !!o3, c3, a3, u2);
                hasConstructorOf(i2, TypesonPromise) ? a3.push([r3, i2, !!o3, c3, S, e2, c3.type]) : i2 !== void 0 && (S[e2] = i2);
              });
            };
            for (var A in t2)
              w(A);
            O2 && O2({endIterateIn: true, end: true});
          } else
            r(t2).forEach(function(e2) {
              var r2 = n2 + (n2 ? "." : "") + escapeKeyPathComponent(e2);
              _adaptBuiltinStateObjectProperties(c3, {ownKeys: true}, function() {
                var n3 = _encapsulate(r2, t2[e2], !!o3, c3, a3, u2);
                hasConstructorOf(n3, TypesonPromise) ? a3.push([r2, n3, !!o3, c3, S, e2, c3.type]) : n3 !== void 0 && (S[e2] = n3);
              });
            }), O2 && O2({endIterateOwn: true, end: true});
          if (c3.iterateUnsetNumeric) {
            for (var C = t2.length, N = function _loop2(e2) {
              if (!(e2 in t2)) {
                var r2 = n2 + (n2 ? "." : "") + e2;
                _adaptBuiltinStateObjectProperties(c3, {ownKeys: false}, function() {
                  var n3 = _encapsulate(r2, void 0, !!o3, c3, a3, u2);
                  hasConstructorOf(n3, TypesonPromise) ? a3.push([r2, n3, !!o3, c3, S, e2, c3.type]) : n3 !== void 0 && (S[e2] = n3);
                });
              }
            }, B = 0; B < C; B++)
              N(B);
            O2 && O2({endIterateUnsetNumeric: true, end: true});
          }
          return S;
        }
        function replace(e2, n2, t2, r2, i2, o3, u2) {
          for (var y3 = i2 ? s2 : c2, p3 = y3.length; p3--; ) {
            var f3 = y3[p3];
            if (f3.test(n2, t2)) {
              var v2 = f3.type;
              if (a2[v2]) {
                var d2 = h2[e2];
                h2[e2] = d2 ? [v2].concat(d2) : v2;
              }
              return Object.assign(t2, {type: v2, replaced: true}), !l2 && f3.replaceAsync || f3.replace ? (u2 && u2({replacing: true}), _encapsulate(e2, f3[l2 || !f3.replaceAsync ? "replace" : "replaceAsync"](n2, t2), O && "readonly", t2, r2, o3, v2)) : (u2 && u2({typeDetected: true}), _encapsulate(e2, n2, O && "readonly", t2, r2, o3, v2));
            }
          }
          return n2;
        }
      };
      this.encapsulateSync = function(e2, n2, t2) {
        return l(e2, n2, Object.assign({}, {throwOnBadSyncType: true}, t2, {sync: true}));
      }, this.encapsulateAsync = function(e2, n2, t2) {
        return l(e2, n2, Object.assign({}, {throwOnBadSyncType: true}, t2, {sync: false}));
      };
      var h = this.revive = function(e2, t2) {
        var s3 = (t2 = Object.assign({sync: true}, o2, t2)).sync, c3 = e2 && e2.$types, u2 = true;
        if (!c3)
          return e2;
        if (c3 === true)
          return e2.$;
        c3.$ && isPlainObject(c3.$) && (e2 = e2.$, c3 = c3.$, u2 = false);
        var y2 = [], p2 = {}, f2 = function _revive(e3, t3, o3, s4, f3, l2) {
          if (u2 && e3 === "$types")
            return;
          var h2 = c3[e3];
          if (i(t3) || isPlainObject(t3)) {
            var v = i(t3) ? new Array(t3.length) : {};
            for (r(t3).forEach(function(n2) {
              var r2 = _revive(e3 + (e3 ? "." : "") + escapeKeyPathComponent(n2), t3[n2], o3 || v, s4, v, n2);
              hasConstructorOf(r2, Undefined) ? v[n2] = void 0 : r2 !== void 0 && (v[n2] = r2);
            }), t3 = v; y2.length; ) {
              var d = n(y2[0], 4), b = d[0], O = d[1], m = d[2], T = d[3], g = getByKeyPath(b, O);
              if (hasConstructorOf(g, Undefined))
                m[T] = void 0;
              else {
                if (g === void 0)
                  break;
                m[T] = g;
              }
              y2.splice(0, 1);
            }
          }
          if (!h2)
            return t3;
          if (h2 === "#") {
            var P = getByKeyPath(o3, t3.substr(1));
            return P === void 0 && y2.push([o3, t3.substr(1), f3, l2]), P;
          }
          var j = s4.sync;
          return [].concat(h2).reduce(function(e4, n2) {
            var t4 = a2[n2];
            if (!t4)
              throw new Error("Unregistered type: " + n2);
            return t4[j && t4.revive ? "revive" : !j && t4.reviveAsync ? "reviveAsync" : "revive"](e4, p2);
          }, t3);
        }("", e2, null, t2);
        return isThenable(f2 = hasConstructorOf(f2, Undefined) ? void 0 : f2) ? s3 && t2.throwOnBadSyncType ? function() {
          throw new TypeError("Sync method requested but async result obtained");
        }() : f2 : !s3 && t2.throwOnBadSyncType ? function() {
          throw new TypeError("Async method requested but sync result obtained");
        }() : s3 ? f2 : Promise.resolve(f2);
      };
      this.reviveSync = function(e2, n2) {
        return h(e2, Object.assign({}, {throwOnBadSyncType: true}, n2, {sync: true}));
      }, this.reviveAsync = function(e2, n2) {
        return h(e2, Object.assign({}, {throwOnBadSyncType: true}, n2, {sync: false}));
      }, this.register = function(e2, n2) {
        return n2 = n2 || {}, [].concat(e2).forEach(function R(e3) {
          if (i(e3))
            return e3.map(R);
          e3 && r(e3).forEach(function(t2) {
            if (t2 === "#")
              throw new TypeError("# cannot be used as a type name as it is reserved for cyclic objects");
            if (Typeson.JSON_TYPES.includes(t2))
              throw new TypeError("Plain JSON object types are reserved as type names");
            var r2 = e3[t2], o3 = r2.testPlainObjects ? s2 : c2, u2 = o3.filter(function(e4) {
              return e4.type === t2;
            });
            if (u2.length && (o3.splice(o3.indexOf(u2[0]), 1), delete a2[t2], delete y[t2]), r2) {
              if (typeof r2 == "function") {
                var p2 = r2;
                r2 = {test: function test(e4) {
                  return e4 && e4.constructor === p2;
                }, replace: function replace(e4) {
                  return assign({}, e4);
                }, revive: function revive(e4) {
                  return assign(Object.create(p2.prototype), e4);
                }};
              } else
                i(r2) && (r2 = {test: r2[0], replace: r2[1], revive: r2[2]});
              var f2 = {type: t2, test: r2.test.bind(r2)};
              r2.replace && (f2.replace = r2.replace.bind(r2)), r2.replaceAsync && (f2.replaceAsync = r2.replaceAsync.bind(r2));
              var l2 = typeof n2.fallback == "number" ? n2.fallback : n2.fallback ? 0 : 1 / 0;
              if (r2.testPlainObjects ? s2.splice(l2, 0, f2) : c2.splice(l2, 0, f2), r2.revive || r2.reviveAsync) {
                var h2 = {};
                r2.revive && (h2.revive = r2.revive.bind(r2)), r2.reviveAsync && (h2.reviveAsync = r2.reviveAsync.bind(r2)), a2[t2] = h2;
              }
              y[t2] = r2;
            }
          });
        }), this;
      };
    }
    function assign(e2, n2) {
      return r(n2).map(function(t2) {
        e2[t2] = n2[t2];
      }), e2;
    }
    function escapeKeyPathComponent(e2) {
      return e2.replace(/~/g, "~0").replace(/\./g, "~1");
    }
    function unescapeKeyPathComponent(e2) {
      return e2.replace(/~1/g, ".").replace(/~0/g, "~");
    }
    function getByKeyPath(e2, n2) {
      if (n2 === "")
        return e2;
      var t2 = n2.indexOf(".");
      if (t2 > -1) {
        var r2 = e2[unescapeKeyPathComponent(n2.substr(0, t2))];
        return r2 === void 0 ? void 0 : getByKeyPath(r2, n2.substr(t2 + 1));
      }
      return e2[unescapeKeyPathComponent(n2)];
    }
    function Undefined() {
    }
    function TypesonPromise(e2) {
      this.p = new Promise(e2);
    }
    return TypesonPromise.prototype.then = function(e2, n2) {
      var t2 = this;
      return new TypesonPromise(function(r2, i2) {
        t2.p.then(function(n3) {
          r2(e2 ? e2(n3) : n3);
        }, function(e3) {
          t2.p.catch(function(e4) {
            return n2 ? n2(e4) : Promise.reject(e4);
          }).then(r2, i2);
        });
      });
    }, TypesonPromise.prototype.catch = function(e2) {
      return this.then(null, e2);
    }, TypesonPromise.resolve = function(e2) {
      return new TypesonPromise(function(n2) {
        n2(e2);
      });
    }, TypesonPromise.reject = function(e2) {
      return new TypesonPromise(function(n2, t2) {
        t2(e2);
      });
    }, ["all", "race"].map(function(e2) {
      TypesonPromise[e2] = function(n2) {
        return new TypesonPromise(function(t2, r2) {
          Promise[e2](n2.map(function(e3) {
            return e3.p;
          })).then(t2, r2);
        });
      };
    }), Typeson.Undefined = Undefined, Typeson.Promise = TypesonPromise, Typeson.isThenable = isThenable, Typeson.toStringTag = toStringTag, Typeson.hasConstructorOf = hasConstructorOf, Typeson.isObject = isObject, Typeson.isPlainObject = isPlainObject, Typeson.isUserObject = function isUserObject(e2) {
      if (!e2 || toStringTag(e2) !== "Object")
        return false;
      var n2 = s(e2);
      return !n2 || hasConstructorOf(e2, Object) || isUserObject(n2);
    }, Typeson.escapeKeyPathComponent = escapeKeyPathComponent, Typeson.unescapeKeyPathComponent = unescapeKeyPathComponent, Typeson.getByKeyPath = getByKeyPath, Typeson.getJSONType = function(n2) {
      return n2 === null ? "null" : i(n2) ? "array" : n2 === void 0 ? "undefined" : e(n2);
    }, Typeson.JSON_TYPES = ["null", "boolean", "number", "string", "array", "object"], Typeson;
  });
});
var structuredCloning = createCommonjsModule(function(module, exports) {
  !function(e, t) {
    module.exports = t();
  }(commonjsGlobal, function() {
    var e = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e2) {
      return typeof e2;
    } : function(e2) {
      return e2 && typeof Symbol == "function" && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
    }, t = function() {
      return function(e2, t2) {
        if (Array.isArray(e2))
          return e2;
        if (Symbol.iterator in Object(e2))
          return function sliceIterator(e3, t3) {
            var n2 = [], r2 = true, i2 = false, o2 = void 0;
            try {
              for (var s2, a2 = e3[Symbol.iterator](); !(r2 = (s2 = a2.next()).done) && (n2.push(s2.value), !t3 || n2.length !== t3); r2 = true)
                ;
            } catch (e4) {
              i2 = true, o2 = e4;
            } finally {
              try {
                !r2 && a2.return && a2.return();
              } finally {
                if (i2)
                  throw o2;
              }
            }
            return n2;
          }(e2, t2);
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }(), n = function(e2) {
      if (Array.isArray(e2)) {
        for (var t2 = 0, n2 = Array(e2.length); t2 < e2.length; t2++)
          n2[t2] = e2[t2];
        return n2;
      }
      return Array.from(e2);
    }, r = Object.keys, i = Array.isArray, o = {}.toString, s = Object.getPrototypeOf, a = {}.hasOwnProperty, c = a.toString, u = ["type", "replaced", "iterateIn", "iterateUnsetNumeric"];
    function isThenable(e2, t2) {
      return Typeson.isObject(e2) && typeof e2.then == "function" && (!t2 || typeof e2.catch == "function");
    }
    function toStringTag(e2) {
      return o.call(e2).slice(8, -1);
    }
    function hasConstructorOf(t2, n2) {
      if (!t2 || (t2 === void 0 ? "undefined" : e(t2)) !== "object")
        return false;
      var r2 = s(t2);
      if (!r2)
        return false;
      var i2 = a.call(r2, "constructor") && r2.constructor;
      return typeof i2 != "function" ? n2 === null : typeof i2 == "function" && n2 !== null && c.call(i2) === c.call(n2);
    }
    function isPlainObject(e2) {
      return !(!e2 || toStringTag(e2) !== "Object") && (!s(e2) || hasConstructorOf(e2, Object));
    }
    function isObject(t2) {
      return t2 && (t2 === void 0 ? "undefined" : e(t2)) === "object";
    }
    function Typeson(o2) {
      var s2 = [], a2 = [], c2 = {}, f2 = this.types = {}, p2 = this.stringify = function(e2, t2, n2, r2) {
        r2 = Object.assign({}, o2, r2, {stringification: true});
        var s3 = y2(e2, null, r2);
        return i(s3) ? JSON.stringify(s3[0], t2, n2) : s3.then(function(e3) {
          return JSON.stringify(e3, t2, n2);
        });
      };
      this.stringifySync = function(e2, t2, n2, r2) {
        return p2(e2, t2, n2, Object.assign({}, {throwOnBadSyncType: true}, r2, {sync: true}));
      }, this.stringifyAsync = function(e2, t2, n2, r2) {
        return p2(e2, t2, n2, Object.assign({}, {throwOnBadSyncType: true}, r2, {sync: false}));
      };
      var l2 = this.parse = function(e2, t2, n2) {
        return n2 = Object.assign({}, o2, n2, {parse: true}), v2(JSON.parse(e2, t2), n2);
      };
      this.parseSync = function(e2, t2, n2) {
        return l2(e2, t2, Object.assign({}, {throwOnBadSyncType: true}, n2, {sync: true}));
      }, this.parseAsync = function(e2, t2, n2) {
        return l2(e2, t2, Object.assign({}, {throwOnBadSyncType: true}, n2, {sync: false}));
      }, this.specialTypeNames = function(e2, t2) {
        var n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return n2.returnTypeNames = true, this.encapsulate(e2, t2, n2);
      }, this.rootTypeName = function(e2, t2) {
        var n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return n2.iterateNone = true, this.encapsulate(e2, t2, n2);
      };
      var y2 = this.encapsulate = function(f3, p3, l3) {
        var y3 = (l3 = Object.assign({sync: true}, o2, l3)).sync, v3 = {}, d2 = [], h2 = [], g2 = [], b2 = !(l3 && "cyclic" in l3) || l3.cyclic, m2 = l3.encapsulateObserver, T2 = _encapsulate("", f3, b2, p3 || {}, g2);
        function finish(e2) {
          var t2 = Object.values(v3);
          if (l3.iterateNone)
            return t2.length ? t2[0] : Typeson.getJSONType(e2);
          if (t2.length) {
            if (l3.returnTypeNames)
              return [].concat(n(new Set(t2)));
            e2 && isPlainObject(e2) && !e2.hasOwnProperty("$types") ? e2.$types = v3 : e2 = {$: e2, $types: {$: v3}};
          } else
            isObject(e2) && e2.hasOwnProperty("$types") && (e2 = {$: e2, $types: true});
          return !l3.returnTypeNames && e2;
        }
        return g2.length ? y3 && l3.throwOnBadSyncType ? function() {
          throw new TypeError("Sync method requested but async result obtained");
        }() : Promise.resolve(function checkPromises(e2, n2) {
          return Promise.all(n2.map(function(e3) {
            return e3[1].p;
          })).then(function(r2) {
            return Promise.all(r2.map(function(r3) {
              var i2 = [], o3 = n2.splice(0, 1)[0], s3 = t(o3, 7), a3 = s3[0], c3 = s3[2], u2 = s3[3], f4 = s3[4], p4 = s3[5], l4 = s3[6], y4 = _encapsulate(a3, r3, c3, u2, i2, true, l4), v4 = hasConstructorOf(y4, TypesonPromise);
              return a3 && v4 ? y4.p.then(function(t2) {
                return f4[p4] = t2, checkPromises(e2, i2);
              }) : (a3 ? f4[p4] = y4 : e2 = v4 ? y4.p : y4, checkPromises(e2, i2));
            }));
          }).then(function() {
            return e2;
          });
        }(T2, g2)).then(finish) : !y3 && l3.throwOnBadSyncType ? function() {
          throw new TypeError("Async method requested but sync result obtained");
        }() : l3.stringification && y3 ? [finish(T2)] : y3 ? finish(T2) : Promise.resolve(finish(T2));
        function _adaptBuiltinStateObjectProperties(e2, t2, n2) {
          Object.assign(e2, t2);
          var r2 = u.map(function(t3) {
            var n3 = e2[t3];
            return delete e2[t3], n3;
          });
          n2(), u.forEach(function(t3, n3) {
            e2[t3] = r2[n3];
          });
        }
        function _encapsulate(t2, n2, o3, a3, c3, u2, f4) {
          var p4 = void 0, y4 = {}, g3 = n2 === void 0 ? "undefined" : e(n2), b3 = m2 ? function(e2) {
            var r2 = f4 || a3.type || Typeson.getJSONType(n2);
            m2(Object.assign(e2 || y4, {keypath: t2, value: n2, cyclic: o3, stateObj: a3, promisesData: c3, resolvingTypesonPromise: u2, awaitingTypesonPromise: hasConstructorOf(n2, TypesonPromise)}, r2 !== void 0 ? {type: r2} : {}));
          } : null;
          if (g3 in {string: 1, boolean: 1, number: 1, undefined: 1})
            return n2 === void 0 || g3 === "number" && (isNaN(n2) || n2 === -1 / 0 || n2 === 1 / 0) ? (p4 = replace(t2, n2, a3, c3, false, u2, b3)) !== n2 && (y4 = {replaced: p4}) : p4 = n2, b3 && b3(), p4;
          if (n2 === null)
            return b3 && b3(), n2;
          if (o3 && !a3.iterateIn && !a3.iterateUnsetNumeric) {
            var T3 = d2.indexOf(n2);
            if (!(T3 < 0))
              return v3[t2] = "#", b3 && b3({cyclicKeypath: h2[T3]}), "#" + h2[T3];
            o3 === true && (d2.push(n2), h2.push(t2));
          }
          var O2 = isPlainObject(n2), w2 = i(n2), S2 = (O2 || w2) && (!s2.length || a3.replaced) || a3.iterateIn ? n2 : replace(t2, n2, a3, c3, O2 || w2, null, b3), P2 = void 0;
          if (S2 !== n2 ? (p4 = S2, y4 = {replaced: S2}) : w2 || a3.iterateIn === "array" ? (P2 = new Array(n2.length), y4 = {clone: P2}) : O2 || a3.iterateIn === "object" ? y4 = {clone: P2 = {}} : t2 === "" && hasConstructorOf(n2, TypesonPromise) ? (c3.push([t2, n2, o3, a3, void 0, void 0, a3.type]), p4 = n2) : p4 = n2, b3 && b3(), l3.iterateNone)
            return P2 || p4;
          if (!P2)
            return p4;
          if (a3.iterateIn) {
            var j2 = function _loop(e2) {
              var r2 = {ownKeys: n2.hasOwnProperty(e2)};
              _adaptBuiltinStateObjectProperties(a3, r2, function() {
                var r3 = t2 + (t2 ? "." : "") + escapeKeyPathComponent(e2), i2 = _encapsulate(r3, n2[e2], !!o3, a3, c3, u2);
                hasConstructorOf(i2, TypesonPromise) ? c3.push([r3, i2, !!o3, a3, P2, e2, a3.type]) : i2 !== void 0 && (P2[e2] = i2);
              });
            };
            for (var A2 in n2)
              j2(A2);
            b3 && b3({endIterateIn: true, end: true});
          } else
            r(n2).forEach(function(e2) {
              var r2 = t2 + (t2 ? "." : "") + escapeKeyPathComponent(e2);
              _adaptBuiltinStateObjectProperties(a3, {ownKeys: true}, function() {
                var t3 = _encapsulate(r2, n2[e2], !!o3, a3, c3, u2);
                hasConstructorOf(t3, TypesonPromise) ? c3.push([r2, t3, !!o3, a3, P2, e2, a3.type]) : t3 !== void 0 && (P2[e2] = t3);
              });
            }), b3 && b3({endIterateOwn: true, end: true});
          if (a3.iterateUnsetNumeric) {
            for (var C2 = n2.length, N2 = function _loop2(e2) {
              if (!(e2 in n2)) {
                var r2 = t2 + (t2 ? "." : "") + e2;
                _adaptBuiltinStateObjectProperties(a3, {ownKeys: false}, function() {
                  var t3 = _encapsulate(r2, void 0, !!o3, a3, c3, u2);
                  hasConstructorOf(t3, TypesonPromise) ? c3.push([r2, t3, !!o3, a3, P2, e2, a3.type]) : t3 !== void 0 && (P2[e2] = t3);
                });
              }
            }, B = 0; B < C2; B++)
              N2(B);
            b3 && b3({endIterateUnsetNumeric: true, end: true});
          }
          return P2;
        }
        function replace(e2, t2, n2, r2, i2, o3, u2) {
          for (var f4 = i2 ? s2 : a2, p4 = f4.length; p4--; ) {
            var l4 = f4[p4];
            if (l4.test(t2, n2)) {
              var d3 = l4.type;
              if (c2[d3]) {
                var h3 = v3[e2];
                v3[e2] = h3 ? [d3].concat(h3) : d3;
              }
              return Object.assign(n2, {type: d3, replaced: true}), !y3 && l4.replaceAsync || l4.replace ? (u2 && u2({replacing: true}), _encapsulate(e2, l4[y3 || !l4.replaceAsync ? "replace" : "replaceAsync"](t2, n2), b2 && "readonly", n2, r2, o3, d3)) : (u2 && u2({typeDetected: true}), _encapsulate(e2, t2, b2 && "readonly", n2, r2, o3, d3));
            }
          }
          return t2;
        }
      };
      this.encapsulateSync = function(e2, t2, n2) {
        return y2(e2, t2, Object.assign({}, {throwOnBadSyncType: true}, n2, {sync: true}));
      }, this.encapsulateAsync = function(e2, t2, n2) {
        return y2(e2, t2, Object.assign({}, {throwOnBadSyncType: true}, n2, {sync: false}));
      };
      var v2 = this.revive = function(e2, n2) {
        var s3 = (n2 = Object.assign({sync: true}, o2, n2)).sync, a3 = e2 && e2.$types, u2 = true;
        if (!a3)
          return e2;
        if (a3 === true)
          return e2.$;
        a3.$ && isPlainObject(a3.$) && (e2 = e2.$, a3 = a3.$, u2 = false);
        var f3 = [], p3 = {}, l3 = function _revive(e3, n3, o3, s4, l4, y3) {
          if (u2 && e3 === "$types")
            return;
          var v3 = a3[e3];
          if (i(n3) || isPlainObject(n3)) {
            var d2 = i(n3) ? new Array(n3.length) : {};
            for (r(n3).forEach(function(t2) {
              var r2 = _revive(e3 + (e3 ? "." : "") + escapeKeyPathComponent(t2), n3[t2], o3 || d2, s4, d2, t2);
              hasConstructorOf(r2, Undefined) ? d2[t2] = void 0 : r2 !== void 0 && (d2[t2] = r2);
            }), n3 = d2; f3.length; ) {
              var h2 = t(f3[0], 4), g2 = h2[0], b2 = h2[1], m2 = h2[2], T2 = h2[3], O2 = getByKeyPath(g2, b2);
              if (hasConstructorOf(O2, Undefined))
                m2[T2] = void 0;
              else {
                if (O2 === void 0)
                  break;
                m2[T2] = O2;
              }
              f3.splice(0, 1);
            }
          }
          if (!v3)
            return n3;
          if (v3 === "#") {
            var w2 = getByKeyPath(o3, n3.substr(1));
            return w2 === void 0 && f3.push([o3, n3.substr(1), l4, y3]), w2;
          }
          var S2 = s4.sync;
          return [].concat(v3).reduce(function(e4, t2) {
            var n4 = c2[t2];
            if (!n4)
              throw new Error("Unregistered type: " + t2);
            return n4[S2 && n4.revive ? "revive" : !S2 && n4.reviveAsync ? "reviveAsync" : "revive"](e4, p3);
          }, n3);
        }("", e2, null, n2);
        return isThenable(l3 = hasConstructorOf(l3, Undefined) ? void 0 : l3) ? s3 && n2.throwOnBadSyncType ? function() {
          throw new TypeError("Sync method requested but async result obtained");
        }() : l3 : !s3 && n2.throwOnBadSyncType ? function() {
          throw new TypeError("Async method requested but sync result obtained");
        }() : s3 ? l3 : Promise.resolve(l3);
      };
      this.reviveSync = function(e2, t2) {
        return v2(e2, Object.assign({}, {throwOnBadSyncType: true}, t2, {sync: true}));
      }, this.reviveAsync = function(e2, t2) {
        return v2(e2, Object.assign({}, {throwOnBadSyncType: true}, t2, {sync: false}));
      }, this.register = function(e2, t2) {
        return t2 = t2 || {}, [].concat(e2).forEach(function R(e3) {
          if (i(e3))
            return e3.map(R);
          e3 && r(e3).forEach(function(n2) {
            if (n2 === "#")
              throw new TypeError("# cannot be used as a type name as it is reserved for cyclic objects");
            if (Typeson.JSON_TYPES.includes(n2))
              throw new TypeError("Plain JSON object types are reserved as type names");
            var r2 = e3[n2], o3 = r2.testPlainObjects ? s2 : a2, u2 = o3.filter(function(e4) {
              return e4.type === n2;
            });
            if (u2.length && (o3.splice(o3.indexOf(u2[0]), 1), delete c2[n2], delete f2[n2]), r2) {
              if (typeof r2 == "function") {
                var p3 = r2;
                r2 = {test: function test(e4) {
                  return e4 && e4.constructor === p3;
                }, replace: function replace(e4) {
                  return assign({}, e4);
                }, revive: function revive(e4) {
                  return assign(Object.create(p3.prototype), e4);
                }};
              } else
                i(r2) && (r2 = {test: r2[0], replace: r2[1], revive: r2[2]});
              var l3 = {type: n2, test: r2.test.bind(r2)};
              r2.replace && (l3.replace = r2.replace.bind(r2)), r2.replaceAsync && (l3.replaceAsync = r2.replaceAsync.bind(r2));
              var y3 = typeof t2.fallback == "number" ? t2.fallback : t2.fallback ? 0 : 1 / 0;
              if (r2.testPlainObjects ? s2.splice(y3, 0, l3) : a2.splice(y3, 0, l3), r2.revive || r2.reviveAsync) {
                var v3 = {};
                r2.revive && (v3.revive = r2.revive.bind(r2)), r2.reviveAsync && (v3.reviveAsync = r2.reviveAsync.bind(r2)), c2[n2] = v3;
              }
              f2[n2] = r2;
            }
          });
        }), this;
      };
    }
    function assign(e2, t2) {
      return r(t2).map(function(n2) {
        e2[n2] = t2[n2];
      }), e2;
    }
    function escapeKeyPathComponent(e2) {
      return e2.replace(/~/g, "~0").replace(/\./g, "~1");
    }
    function unescapeKeyPathComponent(e2) {
      return e2.replace(/~1/g, ".").replace(/~0/g, "~");
    }
    function getByKeyPath(e2, t2) {
      if (t2 === "")
        return e2;
      var n2 = t2.indexOf(".");
      if (n2 > -1) {
        var r2 = e2[unescapeKeyPathComponent(t2.substr(0, n2))];
        return r2 === void 0 ? void 0 : getByKeyPath(r2, t2.substr(n2 + 1));
      }
      return e2[unescapeKeyPathComponent(t2)];
    }
    function Undefined() {
    }
    function TypesonPromise(e2) {
      this.p = new Promise(e2);
    }
    TypesonPromise.prototype.then = function(e2, t2) {
      var n2 = this;
      return new TypesonPromise(function(r2, i2) {
        n2.p.then(function(t3) {
          r2(e2 ? e2(t3) : t3);
        }, function(e3) {
          n2.p.catch(function(e4) {
            return t2 ? t2(e4) : Promise.reject(e4);
          }).then(r2, i2);
        });
      });
    }, TypesonPromise.prototype.catch = function(e2) {
      return this.then(null, e2);
    }, TypesonPromise.resolve = function(e2) {
      return new TypesonPromise(function(t2) {
        t2(e2);
      });
    }, TypesonPromise.reject = function(e2) {
      return new TypesonPromise(function(t2, n2) {
        n2(e2);
      });
    }, ["all", "race"].map(function(e2) {
      TypesonPromise[e2] = function(t2) {
        return new TypesonPromise(function(n2, r2) {
          Promise[e2](t2.map(function(e3) {
            return e3.p;
          })).then(n2, r2);
        });
      };
    }), Typeson.Undefined = Undefined, Typeson.Promise = TypesonPromise, Typeson.isThenable = isThenable, Typeson.toStringTag = toStringTag, Typeson.hasConstructorOf = hasConstructorOf, Typeson.isObject = isObject, Typeson.isPlainObject = isPlainObject, Typeson.isUserObject = function isUserObject(e2) {
      if (!e2 || toStringTag(e2) !== "Object")
        return false;
      var t2 = s(e2);
      return !t2 || hasConstructorOf(e2, Object) || isUserObject(t2);
    }, Typeson.escapeKeyPathComponent = escapeKeyPathComponent, Typeson.unescapeKeyPathComponent = unescapeKeyPathComponent, Typeson.getByKeyPath = getByKeyPath, Typeson.getJSONType = function(t2) {
      return t2 === null ? "null" : i(t2) ? "array" : t2 === void 0 ? "undefined" : e(t2);
    }, Typeson.JSON_TYPES = ["null", "boolean", "number", "string", "array", "object"];
    for (var f = {userObject: {test: function test(e2, t2) {
      return Typeson.isUserObject(e2);
    }, replace: function replace(e2) {
      return Object.assign({}, e2);
    }, revive: function revive(e2) {
      return e2;
    }}}, p = [[{sparseArrays: {testPlainObjects: true, test: function test(e2) {
      return Array.isArray(e2);
    }, replace: function replace(e2, t2) {
      return t2.iterateUnsetNumeric = true, e2;
    }}}, {sparseUndefined: {test: function test(e2, t2) {
      return e2 === void 0 && t2.ownKeys === false;
    }, replace: function replace(e2) {
      return null;
    }, revive: function revive(e2) {
    }}}], {undef: {test: function test(e2, t2) {
      return e2 === void 0 && (t2.ownKeys || !("ownKeys" in t2));
    }, replace: function replace(e2) {
      return null;
    }, revive: function revive(e2) {
      return new Typeson.Undefined();
    }}}], l = {StringObject: {test: function test(t2) {
      return Typeson.toStringTag(t2) === "String" && (t2 === void 0 ? "undefined" : e(t2)) === "object";
    }, replace: function replace(e2) {
      return String(e2);
    }, revive: function revive(e2) {
      return new String(e2);
    }}, BooleanObject: {test: function test(t2) {
      return Typeson.toStringTag(t2) === "Boolean" && (t2 === void 0 ? "undefined" : e(t2)) === "object";
    }, replace: function replace(e2) {
      return Boolean(e2);
    }, revive: function revive(e2) {
      return new Boolean(e2);
    }}, NumberObject: {test: function test(t2) {
      return Typeson.toStringTag(t2) === "Number" && (t2 === void 0 ? "undefined" : e(t2)) === "object";
    }, replace: function replace(e2) {
      return Number(e2);
    }, revive: function revive(e2) {
      return new Number(e2);
    }}}, y = [{nan: {test: function test(e2) {
      return typeof e2 == "number" && isNaN(e2);
    }, replace: function replace(e2) {
      return "NaN";
    }, revive: function revive(e2) {
      return NaN;
    }}}, {infinity: {test: function test(e2) {
      return e2 === 1 / 0;
    }, replace: function replace(e2) {
      return "Infinity";
    }, revive: function revive(e2) {
      return 1 / 0;
    }}}, {negativeInfinity: {test: function test(e2) {
      return e2 === -1 / 0;
    }, replace: function replace(e2) {
      return "-Infinity";
    }, revive: function revive(e2) {
      return -1 / 0;
    }}}], v = {date: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "Date";
    }, replace: function replace(e2) {
      var t2 = e2.getTime();
      return isNaN(t2) ? "NaN" : t2;
    }, revive: function revive(e2) {
      return e2 === "NaN" ? new Date(NaN) : new Date(e2);
    }}}, d = {regexp: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "RegExp";
    }, replace: function replace(e2) {
      return {source: e2.source, flags: (e2.global ? "g" : "") + (e2.ignoreCase ? "i" : "") + (e2.multiline ? "m" : "") + (e2.sticky ? "y" : "") + (e2.unicode ? "u" : "")};
    }, revive: function revive(e2) {
      var t2 = e2.source, n2 = e2.flags;
      return new RegExp(t2, n2);
    }}}, h = {map: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "Map";
    }, replace: function replace(e2) {
      return Array.from(e2.entries());
    }, revive: function revive(e2) {
      return new Map(e2);
    }}}, g = {set: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "Set";
    }, replace: function replace(e2) {
      return Array.from(e2.values());
    }, revive: function revive(e2) {
      return new Set(e2);
    }}}, b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", m = new Uint8Array(256), T = 0; T < b.length; T++)
      m[b.charCodeAt(T)] = T;
    var O = function encode3(e2, t2, n2) {
      for (var r2 = new Uint8Array(e2, t2, n2), i2 = r2.length, o2 = "", s2 = 0; s2 < i2; s2 += 3)
        o2 += b[r2[s2] >> 2], o2 += b[(3 & r2[s2]) << 4 | r2[s2 + 1] >> 4], o2 += b[(15 & r2[s2 + 1]) << 2 | r2[s2 + 2] >> 6], o2 += b[63 & r2[s2 + 2]];
      return i2 % 3 == 2 ? o2 = o2.substring(0, o2.length - 1) + "=" : i2 % 3 == 1 && (o2 = o2.substring(0, o2.length - 2) + "=="), o2;
    }, w = function decode3(e2) {
      var t2 = e2.length, n2 = 0.75 * e2.length, r2 = 0, i2 = void 0, o2 = void 0, s2 = void 0, a2 = void 0;
      e2[e2.length - 1] === "=" && (n2--, e2[e2.length - 2] === "=" && n2--);
      for (var c2 = new ArrayBuffer(n2), u2 = new Uint8Array(c2), f2 = 0; f2 < t2; f2 += 4)
        i2 = m[e2.charCodeAt(f2)], o2 = m[e2.charCodeAt(f2 + 1)], s2 = m[e2.charCodeAt(f2 + 2)], a2 = m[e2.charCodeAt(f2 + 3)], u2[r2++] = i2 << 2 | o2 >> 4, u2[r2++] = (15 & o2) << 4 | s2 >> 2, u2[r2++] = (3 & s2) << 6 | 63 & a2;
      return c2;
    }, S = {arraybuffer: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "ArrayBuffer";
    }, replace: function replace(e2, t2) {
      t2.buffers || (t2.buffers = []);
      var n2 = t2.buffers.indexOf(e2);
      return n2 > -1 ? {index: n2} : (t2.buffers.push(e2), O(e2));
    }, revive: function revive(t2, n2) {
      if (n2.buffers || (n2.buffers = []), (t2 === void 0 ? "undefined" : e(t2)) === "object")
        return n2.buffers[t2.index];
      var r2 = w(t2);
      return n2.buffers.push(r2), r2;
    }}}, P = typeof self == "undefined" ? commonjsGlobal : self, j = {};
    ["Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array"].forEach(function(e2) {
      var t2 = e2, n2 = P[t2];
      n2 && (j[e2.toLowerCase()] = {test: function test(e3) {
        return Typeson.toStringTag(e3) === t2;
      }, replace: function replace(e3, t3) {
        var n3 = e3.buffer, r2 = e3.byteOffset, i2 = e3.length;
        t3.buffers || (t3.buffers = []);
        var o2 = t3.buffers.indexOf(n3);
        return o2 > -1 ? {index: o2, byteOffset: r2, length: i2} : (t3.buffers.push(n3), {encoded: O(n3), byteOffset: r2, length: i2});
      }, revive: function revive(e3, t3) {
        t3.buffers || (t3.buffers = []);
        var r2 = e3.byteOffset, i2 = e3.length, o2 = e3.encoded, s2 = e3.index, a2 = void 0;
        return "index" in e3 ? a2 = t3.buffers[s2] : (a2 = w(o2), t3.buffers.push(a2)), new n2(a2, r2, i2);
      }});
    });
    var A = {dataview: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "DataView";
    }, replace: function replace(e2, t2) {
      var n2 = e2.buffer, r2 = e2.byteOffset, i2 = e2.byteLength;
      t2.buffers || (t2.buffers = []);
      var o2 = t2.buffers.indexOf(n2);
      return o2 > -1 ? {index: o2, byteOffset: r2, byteLength: i2} : (t2.buffers.push(n2), {encoded: O(n2), byteOffset: r2, byteLength: i2});
    }, revive: function revive(e2, t2) {
      t2.buffers || (t2.buffers = []);
      var n2 = e2.byteOffset, r2 = e2.byteLength, i2 = e2.encoded, o2 = e2.index, s2 = void 0;
      return "index" in e2 ? s2 = t2.buffers[o2] : (s2 = w(i2), t2.buffers.push(s2)), new DataView(s2, n2, r2);
    }}}, C = {IntlCollator: {test: function test(e2) {
      return Typeson.hasConstructorOf(e2, Intl.Collator);
    }, replace: function replace(e2) {
      return e2.resolvedOptions();
    }, revive: function revive(e2) {
      return new Intl.Collator(e2.locale, e2);
    }}, IntlDateTimeFormat: {test: function test(e2) {
      return Typeson.hasConstructorOf(e2, Intl.DateTimeFormat);
    }, replace: function replace(e2) {
      return e2.resolvedOptions();
    }, revive: function revive(e2) {
      return new Intl.DateTimeFormat(e2.locale, e2);
    }}, IntlNumberFormat: {test: function test(e2) {
      return Typeson.hasConstructorOf(e2, Intl.NumberFormat);
    }, replace: function replace(e2) {
      return e2.resolvedOptions();
    }, revive: function revive(e2) {
      return new Intl.NumberFormat(e2.locale, e2);
    }}};
    function string2arraybuffer(e2) {
      for (var t2 = new Uint16Array(e2.length), n2 = 0; n2 < e2.length; n2++)
        t2[n2] = e2.charCodeAt(n2);
      return t2.buffer;
    }
    var N = {file: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "File";
    }, replace: function replace(e2) {
      var t2 = new XMLHttpRequest();
      if (t2.open("GET", URL.createObjectURL(e2), false), typeof TextEncoder != "undefined" && t2.overrideMimeType("text/plain; charset=utf-16le"), t2.status !== 200 && t2.status !== 0)
        throw new Error("Bad Blob access: " + t2.status);
      return t2.send(), {type: e2.type, stringContents: t2.responseText, name: e2.name, lastModified: e2.lastModified};
    }, revive: function revive(e2) {
      var t2 = e2.name, n2 = e2.type, r2 = e2.stringContents, i2 = e2.lastModified, o2 = string2arraybuffer(r2);
      return new File([o2], t2, {type: n2, lastModified: i2});
    }, replaceAsync: function replaceAsync(e2) {
      return new Typeson.Promise(function(t2, n2) {
        if (e2.isClosed)
          n2(new Error("The File is closed"));
        else {
          var r2 = new FileReader();
          r2.addEventListener("load", function() {
            t2({type: e2.type, stringContents: r2.result, name: e2.name, lastModified: e2.lastModified});
          }), r2.addEventListener("error", function() {
            n2(r2.error);
          }), r2.readAsText(e2, "UTF-16");
        }
      });
    }}};
    return [f, p, l, y, v, d, {imagedata: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "ImageData";
    }, replace: function replace(e2) {
      return {array: Array.from(e2.data), width: e2.width, height: e2.height};
    }, revive: function revive(e2) {
      return new ImageData(new Uint8ClampedArray(e2.array), e2.width, e2.height);
    }}}, {imagebitmap: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "ImageBitmap" || e2 && e2.dataset && e2.dataset.toStringTag === "ImageBitmap";
    }, replace: function replace(e2) {
      var t2 = document.createElement("canvas");
      return t2.getContext("2d").drawImage(e2, 0, 0), t2.toDataURL();
    }, revive: function revive(e2) {
      var t2 = document.createElement("canvas"), n2 = t2.getContext("2d"), r2 = document.createElement("img");
      return r2.onload = function() {
        n2.drawImage(r2, 0, 0);
      }, r2.src = e2, t2;
    }, reviveAsync: function reviveAsync(e2) {
      var t2 = document.createElement("canvas"), n2 = t2.getContext("2d"), r2 = document.createElement("img");
      return r2.onload = function() {
        n2.drawImage(r2, 0, 0);
      }, r2.src = e2, createImageBitmap(t2);
    }}}, N, {file: N.file, filelist: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "FileList";
    }, replace: function replace(e2) {
      for (var t2 = [], n2 = 0; n2 < e2.length; n2++)
        t2[n2] = e2.item(n2);
      return t2;
    }, revive: function revive(e2) {
      function FileList() {
        this._files = arguments[0], this.length = this._files.length;
      }
      return FileList.prototype.item = function(e3) {
        return this._files[e3];
      }, FileList.prototype[Symbol.toStringTag] = "FileList", new FileList(e2);
    }}}, {blob: {test: function test(e2) {
      return Typeson.toStringTag(e2) === "Blob";
    }, replace: function replace(e2) {
      var t2 = new XMLHttpRequest();
      if (t2.open("GET", URL.createObjectURL(e2), false), typeof TextEncoder != "undefined" && t2.overrideMimeType("text/plain; charset=utf-16le"), t2.status !== 200 && t2.status !== 0)
        throw new Error("Bad Blob access: " + t2.status);
      return t2.send(), {type: e2.type, stringContents: t2.responseText};
    }, revive: function revive(e2) {
      var t2 = e2.type, n2 = e2.stringContents;
      return new Blob([string2arraybuffer(n2)], {type: t2});
    }, replaceAsync: function replaceAsync(e2) {
      return new Typeson.Promise(function(t2, n2) {
        if (e2.isClosed)
          n2(new Error("The Blob is closed"));
        else {
          var r2 = new FileReader();
          r2.addEventListener("load", function() {
            t2({type: e2.type, stringContents: r2.result});
          }), r2.addEventListener("error", function() {
            n2(r2.error);
          }), r2.readAsText(e2, "UTF-16");
        }
      });
    }}}].concat(typeof Map == "function" ? h : [], typeof Set == "function" ? g : [], typeof ArrayBuffer == "function" ? S : [], typeof Uint8Array == "function" ? j : [], typeof DataView == "function" ? A : [], typeof Intl != "undefined" ? C : []);
  });
});
var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var lookup = new Uint8Array(256);
for (var i = 0; i < chars.length; i++) {
  lookup[chars.charCodeAt(i)] = i;
}
var encode = function encode2(arraybuffer, byteOffset, length) {
  if (length === null || length === void 0) {
    length = arraybuffer.byteLength;
  }
  var bytes = new Uint8Array(arraybuffer, byteOffset || 0, length);
  var len = bytes.length;
  var base64 = "";
  for (var _i = 0; _i < len; _i += 3) {
    base64 += chars[bytes[_i] >> 2];
    base64 += chars[(bytes[_i] & 3) << 4 | bytes[_i + 1] >> 4];
    base64 += chars[(bytes[_i + 1] & 15) << 2 | bytes[_i + 2] >> 6];
    base64 += chars[bytes[_i + 2] & 63];
  }
  if (len % 3 === 2) {
    base64 = base64.substring(0, base64.length - 1) + "=";
  } else if (len % 3 === 1) {
    base64 = base64.substring(0, base64.length - 2) + "==";
  }
  return base64;
};
var decode = function decode2(base64) {
  var len = base64.length;
  var bufferLength = base64.length * 0.75;
  var p = 0;
  var encoded1, encoded2, encoded3, encoded4;
  if (base64[base64.length - 1] === "=") {
    bufferLength--;
    if (base64[base64.length - 2] === "=") {
      bufferLength--;
    }
  }
  var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
  for (var _i2 = 0; _i2 < len; _i2 += 4) {
    encoded1 = lookup[base64.charCodeAt(_i2)];
    encoded2 = lookup[base64.charCodeAt(_i2 + 1)];
    encoded3 = lookup[base64.charCodeAt(_i2 + 2)];
    encoded4 = lookup[base64.charCodeAt(_i2 + 3)];
    bytes[p++] = encoded1 << 2 | encoded2 >> 4;
    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
  }
  return arraybuffer;
};
var _global = typeof self === "undefined" ? global : self;
var exportObj = {};
[
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Uint16Array",
  "Int32Array",
  "Uint32Array",
  "Float32Array",
  "Float64Array"
].forEach(function(typeName) {
  var arrType = typeName;
  var TypedArray = _global[arrType];
  if (TypedArray) {
    exportObj[typeName.toLowerCase() + "2"] = {
      test: function(x) {
        return typeson.toStringTag(x) === arrType;
      },
      replace: function(_a) {
        var buffer = _a.buffer, byteOffset = _a.byteOffset, length = _a.length;
        return {
          buffer,
          byteOffset,
          length
        };
      },
      revive: function(b64Obj) {
        var buffer = b64Obj.buffer, byteOffset = b64Obj.byteOffset, length = b64Obj.length;
        return new TypedArray(buffer, byteOffset, length);
      }
    };
  }
});
var arrayBuffer = {
  arraybuffer: {
    test: function(x) {
      return typeson.toStringTag(x) === "ArrayBuffer";
    },
    replace: function(b) {
      return encode(b, 0, b.byteLength);
    },
    revive: function(b64) {
      var buffer = decode(b64);
      return buffer;
    }
  }
};
var TSON = new typeson().register(structuredCloning);
var readBlobsSynchronously = "FileReaderSync" in self;
var blobsToAwait = [];
var blobsToAwaitPos = 0;
TSON.register([
  arrayBuffer,
  exportObj,
  {
    blob2: {
      test: function(x) {
        return typeson.toStringTag(x) === "Blob";
      },
      replace: function(b) {
        if (b.isClosed) {
          throw new Error("The Blob is closed");
        }
        if (readBlobsSynchronously) {
          var data = readBlobSync(b, "binary");
          var base64 = encode(data, 0, data.byteLength);
          return {
            type: b.type,
            data: base64
          };
        } else {
          blobsToAwait.push(b);
          var result = {
            type: b.type,
            data: {start: blobsToAwaitPos, end: blobsToAwaitPos + b.size}
          };
          console.log("b.size: " + b.size);
          blobsToAwaitPos += b.size;
          return result;
        }
      },
      finalize: function(b, ba) {
        b.data = encode(ba, 0, ba.byteLength);
      },
      revive: function(_a) {
        var type = _a.type, data = _a.data;
        return new Blob([decode(data)], {type});
      }
    }
  }
]);
TSON.mustFinalize = function() {
  return blobsToAwait.length > 0;
};
TSON.finalize = function(items) {
  return __awaiter(void 0, void 0, void 0, function() {
    var allChunks, _i, items_1, item, types, arrayType, keyPath, typeName, typeSpec, b;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readBlobAsync(new Blob(blobsToAwait), "binary")];
        case 1:
          allChunks = _a.sent();
          if (items) {
            for (_i = 0, items_1 = items; _i < items_1.length; _i++) {
              item = items_1[_i];
              if (item.$types) {
                types = item.$types;
                arrayType = types.$;
                if (arrayType)
                  types = types.$;
                for (keyPath in types) {
                  typeName = types[keyPath];
                  typeSpec = TSON.types[typeName];
                  if (typeSpec && typeSpec.finalize) {
                    b = Dexie$1.getByKeyPath(item, arrayType ? "$." + keyPath : keyPath);
                    typeSpec.finalize(b, allChunks.slice(b.start, b.end));
                  }
                }
              }
            }
          }
          blobsToAwait = [];
          return [2];
      }
    });
  });
};
var DEFAULT_ROWS_PER_CHUNK = 2e3;
function exportDB(db, options) {
  return __awaiter(this, void 0, void 0, function() {
    function exportAll() {
      return __awaiter(this, void 0, void 0, function() {
        var tablesRowCounts, emptyExportJson, posEndDataArray, firstJsonSlice, filter, _loop_1, _i, tables_1, tableName;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, Promise.all(db.tables.map(function(table) {
                return table.count();
              }))];
            case 1:
              tablesRowCounts = _a.sent();
              tablesRowCounts.forEach(function(rowCount, i) {
                return tables[i].rowCount = rowCount;
              });
              progress.totalRows = tablesRowCounts.reduce(function(p, c) {
                return p + c;
              });
              emptyExportJson = JSON.stringify(emptyExport, void 0, prettyJson ? 2 : void 0);
              posEndDataArray = emptyExportJson.lastIndexOf("]");
              firstJsonSlice = emptyExportJson.substring(0, posEndDataArray);
              slices.push(firstJsonSlice);
              filter = options.filter;
              _loop_1 = function(tableName2) {
                var table, primKey, inbound, LIMIT, emptyTableExport, emptyTableExportJson, posEndRowsArray, lastKey, lastNumRows, mayHaveMoreRows, _loop_2, state_1;
                return __generator(this, function(_a2) {
                  switch (_a2.label) {
                    case 0:
                      table = db.table(tableName2);
                      primKey = table.schema.primKey;
                      inbound = !!primKey.keyPath;
                      LIMIT = options.numRowsPerChunk || DEFAULT_ROWS_PER_CHUNK;
                      emptyTableExport = inbound ? {
                        tableName: table.name,
                        inbound: true,
                        rows: []
                      } : {
                        tableName: table.name,
                        inbound: false,
                        rows: []
                      };
                      emptyTableExportJson = JSON.stringify(emptyTableExport, void 0, prettyJson ? 2 : void 0);
                      if (prettyJson) {
                        emptyTableExportJson = emptyTableExportJson.split("\n").join("\n    ");
                      }
                      posEndRowsArray = emptyTableExportJson.lastIndexOf("]");
                      slices.push(emptyTableExportJson.substring(0, posEndRowsArray));
                      lastKey = null;
                      lastNumRows = 0;
                      mayHaveMoreRows = true;
                      _loop_2 = function() {
                        var chunkedCollection, values, filteredValues, tsonValues, json, keys, keyvals, tsonTuples, json;
                        return __generator(this, function(_a3) {
                          switch (_a3.label) {
                            case 0:
                              if (progressCallback) {
                                Dexie$1.ignoreTransaction(function() {
                                  return progressCallback(progress);
                                });
                              }
                              chunkedCollection = lastKey == null ? table.limit(LIMIT) : table.where(":id").above(lastKey).limit(LIMIT);
                              return [4, chunkedCollection.toArray()];
                            case 1:
                              values = _a3.sent();
                              if (values.length === 0)
                                return [2, "break"];
                              if (lastKey != null && lastNumRows > 0) {
                                slices.push(",");
                                if (prettyJson) {
                                  slices.push("\n      ");
                                }
                              }
                              mayHaveMoreRows = values.length === LIMIT;
                              if (!inbound)
                                return [3, 4];
                              filteredValues = filter ? values.filter(function(value) {
                                return filter(tableName2, value);
                              }) : values;
                              tsonValues = filteredValues.map(function(value) {
                                return TSON.encapsulate(value);
                              });
                              if (!TSON.mustFinalize())
                                return [3, 3];
                              return [4, Dexie$1.waitFor(TSON.finalize(tsonValues))];
                            case 2:
                              _a3.sent();
                              _a3.label = 3;
                            case 3:
                              json = JSON.stringify(tsonValues, void 0, prettyJson ? 2 : void 0);
                              if (prettyJson)
                                json = json.split("\n").join("\n      ");
                              slices.push(new Blob([json.substring(1, json.length - 1)]));
                              lastNumRows = filteredValues.length;
                              lastKey = values.length > 0 ? Dexie$1.getByKeyPath(values[values.length - 1], primKey.keyPath) : null;
                              return [3, 8];
                            case 4:
                              return [4, chunkedCollection.primaryKeys()];
                            case 5:
                              keys = _a3.sent();
                              keyvals = keys.map(function(key, i) {
                                return [key, values[i]];
                              });
                              if (filter)
                                keyvals = keyvals.filter(function(_a4) {
                                  var key = _a4[0], value = _a4[1];
                                  return filter(tableName2, value, key);
                                });
                              tsonTuples = keyvals.map(function(tuple) {
                                return TSON.encapsulate(tuple);
                              });
                              if (!TSON.mustFinalize())
                                return [3, 7];
                              return [4, Dexie$1.waitFor(TSON.finalize(tsonTuples))];
                            case 6:
                              _a3.sent();
                              _a3.label = 7;
                            case 7:
                              json = JSON.stringify(tsonTuples, void 0, prettyJson ? 2 : void 0);
                              if (prettyJson)
                                json = json.split("\n").join("\n      ");
                              slices.push(new Blob([json.substring(1, json.length - 1)]));
                              lastNumRows = keyvals.length;
                              lastKey = keys.length > 0 ? keys[keys.length - 1] : null;
                              _a3.label = 8;
                            case 8:
                              progress.completedRows += values.length;
                              return [2];
                          }
                        });
                      };
                      _a2.label = 1;
                    case 1:
                      if (!mayHaveMoreRows)
                        return [3, 3];
                      return [5, _loop_2()];
                    case 2:
                      state_1 = _a2.sent();
                      if (state_1 === "break")
                        return [3, 3];
                      return [3, 1];
                    case 3:
                      slices.push(emptyTableExportJson.substr(posEndRowsArray));
                      progress.completedTables += 1;
                      if (progress.completedTables < progress.totalTables) {
                        slices.push(",");
                      }
                      return [2];
                  }
                });
              };
              _i = 0, tables_1 = tables;
              _a.label = 2;
            case 2:
              if (!(_i < tables_1.length))
                return [3, 5];
              tableName = tables_1[_i].name;
              return [5, _loop_1(tableName)];
            case 3:
              _a.sent();
              _a.label = 4;
            case 4:
              _i++;
              return [3, 2];
            case 5:
              slices.push(emptyExportJson.substr(posEndDataArray));
              progress.done = true;
              if (progressCallback) {
                Dexie$1.ignoreTransaction(function() {
                  return progressCallback(progress);
                });
              }
              return [2];
          }
        });
      });
    }
    var slices, tables, prettyJson, emptyExport, progressCallback, progress;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          options = options || {};
          slices = [];
          tables = db.tables.map(function(table) {
            return {
              name: table.name,
              schema: getSchemaString(table),
              rowCount: 0
            };
          });
          prettyJson = options.prettyJson;
          emptyExport = {
            formatName: "dexie",
            formatVersion: 1,
            data: {
              databaseName: db.name,
              databaseVersion: db.verno,
              tables,
              data: []
            }
          };
          progressCallback = options.progressCallback;
          progress = {
            done: false,
            completedRows: 0,
            completedTables: 0,
            totalRows: NaN,
            totalTables: db.tables.length
          };
          _a.label = 1;
        case 1:
          _a.trys.push([1, , 6, 7]);
          if (!options.noTransaction)
            return [3, 3];
          return [4, exportAll()];
        case 2:
          _a.sent();
          return [3, 5];
        case 3:
          return [4, db.transaction("r", db.tables, exportAll)];
        case 4:
          _a.sent();
          _a.label = 5;
        case 5:
          return [3, 7];
        case 6:
          TSON.finalize();
          return [7];
        case 7:
          if (progressCallback) {
            Dexie$1.ignoreTransaction(function() {
              return progressCallback(progress);
            });
          }
          return [2, new Blob(slices, {type: "text/json"})];
      }
    });
  });
}
var VERSION = 1;
var fakeStream = {Stream: function() {
}};
var clarinet_1 = createCommonjsModule(function(module, exports) {
  (function(clarinet) {
    var env = typeof process === "object" && process.env ? process.env : self;
    clarinet.parser = function(opt) {
      return new CParser(opt);
    };
    clarinet.CParser = CParser;
    clarinet.CStream = CStream;
    clarinet.createStream = createStream;
    clarinet.MAX_BUFFER_LENGTH = 10 * 1024 * 1024;
    clarinet.DEBUG = env.CDEBUG === "debug";
    clarinet.INFO = env.CDEBUG === "debug" || env.CDEBUG === "info";
    clarinet.EVENTS = [
      "value",
      "string",
      "key",
      "openobject",
      "closeobject",
      "openarray",
      "closearray",
      "error",
      "end",
      "ready"
    ];
    var buffers = {
      textNode: void 0,
      numberNode: ""
    }, streamWraps = clarinet.EVENTS.filter(function(ev) {
      return ev !== "error" && ev !== "end";
    }), S = 0, Stream;
    clarinet.STATE = {
      BEGIN: S++,
      VALUE: S++,
      OPEN_OBJECT: S++,
      CLOSE_OBJECT: S++,
      OPEN_ARRAY: S++,
      CLOSE_ARRAY: S++,
      TEXT_ESCAPE: S++,
      STRING: S++,
      BACKSLASH: S++,
      END: S++,
      OPEN_KEY: S++,
      CLOSE_KEY: S++,
      TRUE: S++,
      TRUE2: S++,
      TRUE3: S++,
      FALSE: S++,
      FALSE2: S++,
      FALSE3: S++,
      FALSE4: S++,
      NULL: S++,
      NULL2: S++,
      NULL3: S++,
      NUMBER_DECIMAL_POINT: S++,
      NUMBER_DIGIT: S++
    };
    for (var s_ in clarinet.STATE)
      clarinet.STATE[clarinet.STATE[s_]] = s_;
    S = clarinet.STATE;
    const Char = {
      tab: 9,
      lineFeed: 10,
      carriageReturn: 13,
      space: 32,
      doubleQuote: 34,
      plus: 43,
      comma: 44,
      minus: 45,
      period: 46,
      _0: 48,
      _9: 57,
      colon: 58,
      E: 69,
      openBracket: 91,
      backslash: 92,
      closeBracket: 93,
      a: 97,
      b: 98,
      e: 101,
      f: 102,
      l: 108,
      n: 110,
      r: 114,
      s: 115,
      t: 116,
      u: 117,
      openBrace: 123,
      closeBrace: 125
    };
    if (!Object.create) {
      Object.create = function(o) {
        function f() {
          this["__proto__"] = o;
        }
        f.prototype = o;
        return new f();
      };
    }
    if (!Object.getPrototypeOf) {
      Object.getPrototypeOf = function(o) {
        return o["__proto__"];
      };
    }
    if (!Object.keys) {
      Object.keys = function(o) {
        var a = [];
        for (var i in o)
          if (o.hasOwnProperty(i))
            a.push(i);
        return a;
      };
    }
    function checkBufferLength(parser) {
      var maxAllowed = Math.max(clarinet.MAX_BUFFER_LENGTH, 10), maxActual = 0;
      for (var buffer in buffers) {
        var len = parser[buffer] === void 0 ? 0 : parser[buffer].length;
        if (len > maxAllowed) {
          switch (buffer) {
            case "text":
              closeText(parser);
              break;
            default:
              error(parser, "Max buffer length exceeded: " + buffer);
          }
        }
        maxActual = Math.max(maxActual, len);
      }
      parser.bufferCheckPosition = clarinet.MAX_BUFFER_LENGTH - maxActual + parser.position;
    }
    function clearBuffers(parser) {
      for (var buffer in buffers) {
        parser[buffer] = buffers[buffer];
      }
    }
    var stringTokenPattern = /[\\"\n]/g;
    function CParser(opt) {
      if (!(this instanceof CParser))
        return new CParser(opt);
      var parser = this;
      clearBuffers(parser);
      parser.bufferCheckPosition = clarinet.MAX_BUFFER_LENGTH;
      parser.q = parser.c = parser.p = "";
      parser.opt = opt || {};
      parser.closed = parser.closedRoot = parser.sawRoot = false;
      parser.tag = parser.error = null;
      parser.state = S.BEGIN;
      parser.stack = new Array();
      parser.position = parser.column = 0;
      parser.line = 1;
      parser.slashed = false;
      parser.unicodeI = 0;
      parser.unicodeS = null;
      parser.depth = 0;
      emit(parser, "onready");
    }
    CParser.prototype = {
      end: function() {
        end(this);
      },
      write,
      resume: function() {
        this.error = null;
        return this;
      },
      close: function() {
        return this.write(null);
      }
    };
    try {
      Stream = fakeStream.Stream;
    } catch (ex) {
      Stream = function() {
      };
    }
    function createStream(opt) {
      return new CStream(opt);
    }
    function CStream(opt) {
      if (!(this instanceof CStream))
        return new CStream(opt);
      this._parser = new CParser(opt);
      this.writable = true;
      this.readable = true;
      this.bytes_remaining = 0;
      this.bytes_in_sequence = 0;
      this.temp_buffs = {"2": new Buffer(2), "3": new Buffer(3), "4": new Buffer(4)};
      this.string = "";
      var me = this;
      Stream.apply(me);
      this._parser.onend = function() {
        me.emit("end");
      };
      this._parser.onerror = function(er) {
        me.emit("error", er);
        me._parser.error = null;
      };
      streamWraps.forEach(function(ev) {
        Object.defineProperty(me, "on" + ev, {
          get: function() {
            return me._parser["on" + ev];
          },
          set: function(h) {
            if (!h) {
              me.removeAllListeners(ev);
              me._parser["on" + ev] = h;
              return h;
            }
            me.on(ev, h);
          },
          enumerable: true,
          configurable: false
        });
      });
    }
    CStream.prototype = Object.create(Stream.prototype, {constructor: {value: CStream}});
    CStream.prototype.write = function(data) {
      data = new Buffer(data);
      for (var i = 0; i < data.length; i++) {
        var n = data[i];
        if (this.bytes_remaining > 0) {
          for (var j = 0; j < this.bytes_remaining; j++) {
            this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = data[j];
          }
          this.string = this.temp_buffs[this.bytes_in_sequence].toString();
          this.bytes_in_sequence = this.bytes_remaining = 0;
          i = i + j - 1;
          this._parser.write(this.string);
          this.emit("data", this.string);
          continue;
        }
        if (this.bytes_remaining === 0 && n >= 128) {
          if (n >= 194 && n <= 223)
            this.bytes_in_sequence = 2;
          if (n >= 224 && n <= 239)
            this.bytes_in_sequence = 3;
          if (n >= 240 && n <= 244)
            this.bytes_in_sequence = 4;
          if (this.bytes_in_sequence + i > data.length) {
            for (var k = 0; k <= data.length - 1 - i; k++) {
              this.temp_buffs[this.bytes_in_sequence][k] = data[i + k];
            }
            this.bytes_remaining = i + this.bytes_in_sequence - data.length;
            return true;
          } else {
            this.string = data.slice(i, i + this.bytes_in_sequence).toString();
            i = i + this.bytes_in_sequence - 1;
            this._parser.write(this.string);
            this.emit("data", this.string);
            continue;
          }
        }
        for (var p = i; p < data.length; p++) {
          if (data[p] >= 128)
            break;
        }
        this.string = data.slice(i, p).toString();
        this._parser.write(this.string);
        this.emit("data", this.string);
        i = p - 1;
        continue;
      }
    };
    CStream.prototype.end = function(chunk) {
      if (chunk && chunk.length)
        this._parser.write(chunk.toString());
      this._parser.end();
      return true;
    };
    CStream.prototype.on = function(ev, handler) {
      var me = this;
      if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
        me._parser["on" + ev] = function() {
          var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
          args.splice(0, 0, ev);
          me.emit.apply(me, args);
        };
      }
      return Stream.prototype.on.call(me, ev, handler);
    };
    CStream.prototype.destroy = function() {
      clearBuffers(this._parser);
      this.emit("close");
    };
    function emit(parser, event, data) {
      if (clarinet.INFO)
        console.log("-- emit", event, data);
      if (parser[event])
        parser[event](data);
    }
    function emitNode(parser, event, data) {
      closeValue(parser);
      emit(parser, event, data);
    }
    function closeValue(parser, event) {
      parser.textNode = textopts(parser.opt, parser.textNode);
      if (parser.textNode !== void 0) {
        emit(parser, event ? event : "onvalue", parser.textNode);
      }
      parser.textNode = void 0;
    }
    function closeNumber(parser) {
      if (parser.numberNode)
        emit(parser, "onvalue", parseFloat(parser.numberNode));
      parser.numberNode = "";
    }
    function textopts(opt, text) {
      if (text === void 0) {
        return text;
      }
      if (opt.trim)
        text = text.trim();
      if (opt.normalize)
        text = text.replace(/\s+/g, " ");
      return text;
    }
    function error(parser, er) {
      closeValue(parser);
      er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
      er = new Error(er);
      parser.error = er;
      emit(parser, "onerror", er);
      return parser;
    }
    function end(parser) {
      if (parser.state !== S.VALUE || parser.depth !== 0)
        error(parser, "Unexpected end");
      closeValue(parser);
      parser.c = "";
      parser.closed = true;
      emit(parser, "onend");
      CParser.call(parser, parser.opt);
      return parser;
    }
    function isWhitespace(c) {
      return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;
    }
    function write(chunk) {
      var parser = this;
      if (this.error)
        throw this.error;
      if (parser.closed)
        return error(parser, "Cannot write after close. Assign an onready handler.");
      if (chunk === null)
        return end(parser);
      var i = 0, c = chunk.charCodeAt(0), p = parser.p;
      if (clarinet.DEBUG)
        console.log("write -> [" + chunk + "]");
      while (c) {
        p = c;
        parser.c = c = chunk.charCodeAt(i++);
        if (p !== c)
          parser.p = p;
        else
          p = parser.p;
        if (!c)
          break;
        if (clarinet.DEBUG)
          console.log(i, c, clarinet.STATE[parser.state]);
        parser.position++;
        if (c === Char.lineFeed) {
          parser.line++;
          parser.column = 0;
        } else
          parser.column++;
        switch (parser.state) {
          case S.BEGIN:
            if (c === Char.openBrace)
              parser.state = S.OPEN_OBJECT;
            else if (c === Char.openBracket)
              parser.state = S.OPEN_ARRAY;
            else if (!isWhitespace(c))
              error(parser, "Non-whitespace before {[.");
            continue;
          case S.OPEN_KEY:
          case S.OPEN_OBJECT:
            if (isWhitespace(c))
              continue;
            if (parser.state === S.OPEN_KEY)
              parser.stack.push(S.CLOSE_KEY);
            else {
              if (c === Char.closeBrace) {
                emit(parser, "onopenobject");
                this.depth++;
                emit(parser, "oncloseobject");
                this.depth--;
                parser.state = parser.stack.pop() || S.VALUE;
                continue;
              } else
                parser.stack.push(S.CLOSE_OBJECT);
            }
            if (c === Char.doubleQuote)
              parser.state = S.STRING;
            else
              error(parser, 'Malformed object key should start with "');
            continue;
          case S.CLOSE_KEY:
          case S.CLOSE_OBJECT:
            if (isWhitespace(c))
              continue;
            var event = parser.state === S.CLOSE_KEY ? "key" : "object";
            if (c === Char.colon) {
              if (parser.state === S.CLOSE_OBJECT) {
                parser.stack.push(S.CLOSE_OBJECT);
                closeValue(parser, "onopenobject");
                this.depth++;
              } else
                closeValue(parser, "onkey");
              parser.state = S.VALUE;
            } else if (c === Char.closeBrace) {
              emitNode(parser, "oncloseobject");
              this.depth--;
              parser.state = parser.stack.pop() || S.VALUE;
            } else if (c === Char.comma) {
              if (parser.state === S.CLOSE_OBJECT)
                parser.stack.push(S.CLOSE_OBJECT);
              closeValue(parser);
              parser.state = S.OPEN_KEY;
            } else
              error(parser, "Bad object");
            continue;
          case S.OPEN_ARRAY:
          case S.VALUE:
            if (isWhitespace(c))
              continue;
            if (parser.state === S.OPEN_ARRAY) {
              emit(parser, "onopenarray");
              this.depth++;
              parser.state = S.VALUE;
              if (c === Char.closeBracket) {
                emit(parser, "onclosearray");
                this.depth--;
                parser.state = parser.stack.pop() || S.VALUE;
                continue;
              } else {
                parser.stack.push(S.CLOSE_ARRAY);
              }
            }
            if (c === Char.doubleQuote)
              parser.state = S.STRING;
            else if (c === Char.openBrace)
              parser.state = S.OPEN_OBJECT;
            else if (c === Char.openBracket)
              parser.state = S.OPEN_ARRAY;
            else if (c === Char.t)
              parser.state = S.TRUE;
            else if (c === Char.f)
              parser.state = S.FALSE;
            else if (c === Char.n)
              parser.state = S.NULL;
            else if (c === Char.minus) {
              parser.numberNode += "-";
            } else if (Char._0 <= c && c <= Char._9) {
              parser.numberNode += String.fromCharCode(c);
              parser.state = S.NUMBER_DIGIT;
            } else
              error(parser, "Bad value");
            continue;
          case S.CLOSE_ARRAY:
            if (c === Char.comma) {
              parser.stack.push(S.CLOSE_ARRAY);
              closeValue(parser, "onvalue");
              parser.state = S.VALUE;
            } else if (c === Char.closeBracket) {
              emitNode(parser, "onclosearray");
              this.depth--;
              parser.state = parser.stack.pop() || S.VALUE;
            } else if (isWhitespace(c))
              continue;
            else
              error(parser, "Bad array");
            continue;
          case S.STRING:
            if (parser.textNode === void 0) {
              parser.textNode = "";
            }
            var starti = i - 1, slashed = parser.slashed, unicodeI = parser.unicodeI;
            STRING_BIGLOOP:
              while (true) {
                if (clarinet.DEBUG)
                  console.log(i, c, clarinet.STATE[parser.state], slashed);
                while (unicodeI > 0) {
                  parser.unicodeS += String.fromCharCode(c);
                  c = chunk.charCodeAt(i++);
                  parser.position++;
                  if (unicodeI === 4) {
                    parser.textNode += String.fromCharCode(parseInt(parser.unicodeS, 16));
                    unicodeI = 0;
                    starti = i - 1;
                  } else {
                    unicodeI++;
                  }
                  if (!c)
                    break STRING_BIGLOOP;
                }
                if (c === Char.doubleQuote && !slashed) {
                  parser.state = parser.stack.pop() || S.VALUE;
                  parser.textNode += chunk.substring(starti, i - 1);
                  parser.position += i - 1 - starti;
                  break;
                }
                if (c === Char.backslash && !slashed) {
                  slashed = true;
                  parser.textNode += chunk.substring(starti, i - 1);
                  parser.position += i - 1 - starti;
                  c = chunk.charCodeAt(i++);
                  parser.position++;
                  if (!c)
                    break;
                }
                if (slashed) {
                  slashed = false;
                  if (c === Char.n) {
                    parser.textNode += "\n";
                  } else if (c === Char.r) {
                    parser.textNode += "\r";
                  } else if (c === Char.t) {
                    parser.textNode += "	";
                  } else if (c === Char.f) {
                    parser.textNode += "\f";
                  } else if (c === Char.b) {
                    parser.textNode += "\b";
                  } else if (c === Char.u) {
                    unicodeI = 1;
                    parser.unicodeS = "";
                  } else {
                    parser.textNode += String.fromCharCode(c);
                  }
                  c = chunk.charCodeAt(i++);
                  parser.position++;
                  starti = i - 1;
                  if (!c)
                    break;
                  else
                    continue;
                }
                stringTokenPattern.lastIndex = i;
                var reResult = stringTokenPattern.exec(chunk);
                if (reResult === null) {
                  i = chunk.length + 1;
                  parser.textNode += chunk.substring(starti, i - 1);
                  parser.position += i - 1 - starti;
                  break;
                }
                i = reResult.index + 1;
                c = chunk.charCodeAt(reResult.index);
                if (!c) {
                  parser.textNode += chunk.substring(starti, i - 1);
                  parser.position += i - 1 - starti;
                  break;
                }
              }
            parser.slashed = slashed;
            parser.unicodeI = unicodeI;
            continue;
          case S.TRUE:
            if (c === Char.r)
              parser.state = S.TRUE2;
            else
              error(parser, "Invalid true started with t" + c);
            continue;
          case S.TRUE2:
            if (c === Char.u)
              parser.state = S.TRUE3;
            else
              error(parser, "Invalid true started with tr" + c);
            continue;
          case S.TRUE3:
            if (c === Char.e) {
              emit(parser, "onvalue", true);
              parser.state = parser.stack.pop() || S.VALUE;
            } else
              error(parser, "Invalid true started with tru" + c);
            continue;
          case S.FALSE:
            if (c === Char.a)
              parser.state = S.FALSE2;
            else
              error(parser, "Invalid false started with f" + c);
            continue;
          case S.FALSE2:
            if (c === Char.l)
              parser.state = S.FALSE3;
            else
              error(parser, "Invalid false started with fa" + c);
            continue;
          case S.FALSE3:
            if (c === Char.s)
              parser.state = S.FALSE4;
            else
              error(parser, "Invalid false started with fal" + c);
            continue;
          case S.FALSE4:
            if (c === Char.e) {
              emit(parser, "onvalue", false);
              parser.state = parser.stack.pop() || S.VALUE;
            } else
              error(parser, "Invalid false started with fals" + c);
            continue;
          case S.NULL:
            if (c === Char.u)
              parser.state = S.NULL2;
            else
              error(parser, "Invalid null started with n" + c);
            continue;
          case S.NULL2:
            if (c === Char.l)
              parser.state = S.NULL3;
            else
              error(parser, "Invalid null started with nu" + c);
            continue;
          case S.NULL3:
            if (c === Char.l) {
              emit(parser, "onvalue", null);
              parser.state = parser.stack.pop() || S.VALUE;
            } else
              error(parser, "Invalid null started with nul" + c);
            continue;
          case S.NUMBER_DECIMAL_POINT:
            if (c === Char.period) {
              parser.numberNode += ".";
              parser.state = S.NUMBER_DIGIT;
            } else
              error(parser, "Leading zero not followed by .");
            continue;
          case S.NUMBER_DIGIT:
            if (Char._0 <= c && c <= Char._9)
              parser.numberNode += String.fromCharCode(c);
            else if (c === Char.period) {
              if (parser.numberNode.indexOf(".") !== -1)
                error(parser, "Invalid number has two dots");
              parser.numberNode += ".";
            } else if (c === Char.e || c === Char.E) {
              if (parser.numberNode.indexOf("e") !== -1 || parser.numberNode.indexOf("E") !== -1)
                error(parser, "Invalid number has two exponential");
              parser.numberNode += "e";
            } else if (c === Char.plus || c === Char.minus) {
              if (!(p === Char.e || p === Char.E))
                error(parser, "Invalid symbol in number");
              parser.numberNode += String.fromCharCode(c);
            } else {
              closeNumber(parser);
              i--;
              parser.state = parser.stack.pop() || S.VALUE;
            }
            continue;
          default:
            error(parser, "Unknown state: " + parser.state);
        }
      }
      if (parser.position >= parser.bufferCheckPosition)
        checkBufferLength(parser);
      return parser;
    }
  })(exports);
});
function JsonStream(blob) {
  var pos = 0;
  var parser = JsonParser(true);
  var rv = {
    pullAsync: function(numBytes) {
      return __awaiter(this, void 0, void 0, function() {
        var slize, jsonPart, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              slize = blob.slice(pos, pos + numBytes);
              pos += numBytes;
              return [4, readBlobAsync(slize, "text")];
            case 1:
              jsonPart = _a.sent();
              result = parser.write(jsonPart);
              rv.result = result || {};
              return [2, result];
          }
        });
      });
    },
    pullSync: function(numBytes) {
      var slize = blob.slice(pos, pos + numBytes);
      pos += numBytes;
      var jsonPart = readBlobSync(slize, "text");
      var result = parser.write(jsonPart);
      rv.result = result || {};
      return result;
    },
    done: function() {
      return parser.done();
    },
    eof: function() {
      return pos >= blob.size;
    },
    result: {}
  };
  return rv;
}
function JsonParser(allowPartial) {
  var parser = clarinet_1.parser();
  var level = 0;
  var result;
  var stack = [];
  var obj;
  var key;
  var done = false;
  var array = false;
  parser.onopenobject = function(newKey) {
    var newObj = {};
    newObj.incomplete = true;
    if (!result)
      result = newObj;
    if (obj) {
      stack.push([key, obj, array]);
      if (allowPartial) {
        if (array) {
          obj.push(newObj);
        } else {
          obj[key] = newObj;
        }
      }
    }
    obj = newObj;
    key = newKey;
    array = false;
    ++level;
  };
  parser.onkey = function(newKey) {
    return key = newKey;
  };
  parser.onvalue = function(value) {
    return array ? obj.push(value) : obj[key] = value;
  };
  parser.oncloseobject = function() {
    var _a;
    delete obj.incomplete;
    key = null;
    if (--level === 0) {
      done = true;
    } else {
      var completedObj = obj;
      _a = stack.pop(), key = _a[0], obj = _a[1], array = _a[2];
      if (!allowPartial) {
        if (array) {
          obj.push(completedObj);
        } else {
          obj[key] = completedObj;
        }
      }
    }
  };
  parser.onopenarray = function() {
    var newObj = [];
    newObj.incomplete = true;
    if (!result)
      result = newObj;
    if (obj) {
      stack.push([key, obj, array]);
      if (allowPartial) {
        if (array) {
          obj.push(newObj);
        } else {
          obj[key] = newObj;
        }
      }
    }
    obj = newObj;
    array = true;
    key = null;
    ++level;
  };
  parser.onclosearray = function() {
    var _a;
    delete obj.incomplete;
    key = null;
    if (--level === 0) {
      done = true;
    } else {
      var completedObj = obj;
      _a = stack.pop(), key = _a[0], obj = _a[1], array = _a[2];
      if (!allowPartial) {
        if (array) {
          obj.push(completedObj);
        } else {
          obj[key] = completedObj;
        }
      }
    }
  };
  return {
    write: function(jsonPart) {
      parser.write(jsonPart);
      return result;
    },
    done: function() {
      return done;
    }
  };
}
var DEFAULT_KILOBYTES_PER_CHUNK = 1024;
function importDB(exportedData, options) {
  return __awaiter(this, void 0, void 0, function() {
    var CHUNK_SIZE, stream, dbExport, db;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          options = options || {};
          CHUNK_SIZE = options.chunkSizeBytes || DEFAULT_KILOBYTES_PER_CHUNK * 1024;
          return [4, loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE)];
        case 1:
          stream = _a.sent();
          dbExport = stream.result.data;
          db = new Dexie$1(dbExport.databaseName);
          db.version(dbExport.databaseVersion).stores(extractDbSchema(dbExport));
          return [4, importInto(db, stream, options)];
        case 2:
          _a.sent();
          return [2, db];
      }
    });
  });
}
function peakImportFile(exportedData) {
  return __awaiter(this, void 0, void 0, function() {
    var stream;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          stream = JsonStream(exportedData);
          _a.label = 1;
        case 1:
          if (!!stream.eof())
            return [3, 3];
          return [4, stream.pullAsync(5 * 1024)];
        case 2:
          _a.sent();
          if (stream.result.data && stream.result.data.data) {
            delete stream.result.data.data;
            return [3, 3];
          }
          return [3, 1];
        case 3:
          return [2, stream.result];
      }
    });
  });
}
function importInto(db, exportedData, options) {
  return __awaiter(this, void 0, void 0, function() {
    function importAll() {
      return __awaiter(this, void 0, void 0, function() {
        var _loop_1, _i, _a, tableExport, state_1;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _loop_1 = function(tableExport2) {
                var tableName, table, tableSchemaStr, sourceRows, rows, i, obj, filter, filteredRows, _a2, keys, values;
                return __generator(this, function(_b2) {
                  switch (_b2.label) {
                    case 0:
                      if (!tableExport2.rows)
                        return [2, "break"];
                      if (!tableExport2.rows.incomplete && tableExport2.rows.length === 0)
                        return [2, "continue"];
                      if (progressCallback) {
                        Dexie$1.ignoreTransaction(function() {
                          return progressCallback(progress);
                        });
                      }
                      tableName = tableExport2.tableName;
                      table = db.table(tableName);
                      tableSchemaStr = dbExport.tables.filter(function(t) {
                        return t.name === tableName;
                      })[0].schema;
                      if (!table) {
                        if (!options.acceptMissingTables)
                          throw new Error("Exported table " + tableExport2.tableName + " is missing in installed database");
                        else
                          return [2, "continue"];
                      }
                      if (!options.acceptChangedPrimaryKey && tableSchemaStr.split(",")[0] != table.schema.primKey.src) {
                        throw new Error("Primary key differs for table " + tableExport2.tableName + ". ");
                      }
                      sourceRows = tableExport2.rows;
                      rows = [];
                      for (i = 0; i < sourceRows.length; i++) {
                        obj = sourceRows[i];
                        if (!obj.incomplete) {
                          rows.push(TSON.revive(obj));
                        } else {
                          break;
                        }
                      }
                      filter = options.filter;
                      filteredRows = filter ? tableExport2.inbound ? rows.filter(function(value) {
                        return filter(tableName, value);
                      }) : rows.filter(function(_a3) {
                        var key = _a3[0], value = _a3[1];
                        return filter(tableName, value, key);
                      }) : rows;
                      _a2 = tableExport2.inbound ? [void 0, filteredRows] : [filteredRows.map(function(row) {
                        return row[0];
                      }), rows.map(function(row) {
                        return row[1];
                      })], keys = _a2[0], values = _a2[1];
                      if (!options.clearTablesBeforeImport)
                        return [3, 2];
                      return [4, table.clear()];
                    case 1:
                      _b2.sent();
                      _b2.label = 2;
                    case 2:
                      if (!options.overwriteValues)
                        return [3, 4];
                      return [4, table.bulkPut(values, keys)];
                    case 3:
                      _b2.sent();
                      return [3, 6];
                    case 4:
                      return [4, table.bulkAdd(values, keys)];
                    case 5:
                      _b2.sent();
                      _b2.label = 6;
                    case 6:
                      progress.completedRows += rows.length;
                      if (!rows.incomplete) {
                        progress.completedTables += 1;
                      }
                      sourceRows.splice(0, rows.length);
                      return [2];
                  }
                });
              };
              _i = 0, _a = dbExport.data;
              _b.label = 1;
            case 1:
              if (!(_i < _a.length))
                return [3, 4];
              tableExport = _a[_i];
              return [5, _loop_1(tableExport)];
            case 2:
              state_1 = _b.sent();
              if (state_1 === "break")
                return [3, 4];
              _b.label = 3;
            case 3:
              _i++;
              return [3, 1];
            case 4:
              while (dbExport.data.length > 0 && dbExport.data[0].rows && !dbExport.data[0].rows.incomplete) {
                dbExport.data.splice(0, 1);
              }
              if (!(!jsonStream.done() && !jsonStream.eof()))
                return [3, 8];
              if (!readBlobsSynchronously2)
                return [3, 5];
              jsonStream.pullSync(CHUNK_SIZE);
              return [3, 7];
            case 5:
              return [4, Dexie$1.waitFor(jsonStream.pullAsync(CHUNK_SIZE))];
            case 6:
              _b.sent();
              _b.label = 7;
            case 7:
              return [3, 9];
            case 8:
              return [3, 10];
            case 9:
              return [3, 0];
            case 10:
              return [2];
          }
        });
      });
    }
    var CHUNK_SIZE, jsonStream, dbExportFile, readBlobsSynchronously2, dbExport, progressCallback, progress;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          options = options || {};
          CHUNK_SIZE = options.chunkSizeBytes || DEFAULT_KILOBYTES_PER_CHUNK * 1024;
          return [4, loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE)];
        case 1:
          jsonStream = _a.sent();
          dbExportFile = jsonStream.result;
          readBlobsSynchronously2 = "FileReaderSync" in self;
          dbExport = dbExportFile.data;
          if (!options.acceptNameDiff && db.name !== dbExport.databaseName)
            throw new Error("Name differs. Current database name is " + db.name + " but export is " + dbExport.databaseName);
          if (!options.acceptVersionDiff && db.verno !== dbExport.databaseVersion) {
            throw new Error("Database version differs. Current database is in version " + db.verno + " but export is " + dbExport.databaseVersion);
          }
          progressCallback = options.progressCallback;
          progress = {
            done: false,
            completedRows: 0,
            completedTables: 0,
            totalRows: dbExport.tables.reduce(function(p, c) {
              return p + c.rowCount;
            }, 0),
            totalTables: dbExport.tables.length
          };
          if (progressCallback) {
            Dexie$1.ignoreTransaction(function() {
              return progressCallback(progress);
            });
          }
          if (!options.noTransaction)
            return [3, 3];
          return [4, importAll()];
        case 2:
          _a.sent();
          return [3, 5];
        case 3:
          return [4, db.transaction("rw", db.tables, importAll)];
        case 4:
          _a.sent();
          _a.label = 5;
        case 5:
          progress.done = true;
          if (progressCallback) {
            Dexie$1.ignoreTransaction(function() {
              return progressCallback(progress);
            });
          }
          return [2];
      }
    });
  });
}
function loadUntilWeGotEnoughData(exportedData, CHUNK_SIZE) {
  return __awaiter(this, void 0, void 0, function() {
    var stream, dbExportFile;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          stream = "slice" in exportedData ? JsonStream(exportedData) : exportedData;
          _a.label = 1;
        case 1:
          if (!!stream.eof())
            return [3, 3];
          return [4, stream.pullAsync(CHUNK_SIZE)];
        case 2:
          _a.sent();
          if (stream.result.data && stream.result.data.data)
            return [3, 3];
          return [3, 1];
        case 3:
          dbExportFile = stream.result;
          if (!dbExportFile || dbExportFile.formatName != "dexie")
            throw new Error("Given file is not a dexie export");
          if (dbExportFile.formatVersion > VERSION) {
            throw new Error("Format version " + dbExportFile.formatVersion + " not supported");
          }
          if (!dbExportFile.data) {
            throw new Error("No data in export file");
          }
          if (!dbExportFile.data.databaseName) {
            throw new Error("Missing databaseName in export file");
          }
          if (!dbExportFile.data.databaseVersion) {
            throw new Error("Missing databaseVersion in export file");
          }
          if (!dbExportFile.data.tables) {
            throw new Error("Missing tables in export file");
          }
          return [2, stream];
      }
    });
  });
}
Dexie$1.prototype.export = function(options) {
  return exportDB(this, options);
};
Dexie$1.prototype.import = function(blob, options) {
  return importInto(this, blob, options);
};
Dexie$1.import = function(blob, options) {
  return importDB(blob, options);
};
var dexieExportImport = function() {
  throw new Error("This addon extends Dexie.prototype globally and does not have be included in Dexie constructor's addons options.");
};

export default dexieExportImport;
export { exportDB, importDB, importInto, peakImportFile };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
